var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/preset.ts
var preset_exports = {};
__export(preset_exports, {
  PresetService: () => PresetService
});
module.exports = __toCommonJS(preset_exports);
var import_promises = __toESM(require("fs/promises"), 1);
var import_fs = require("fs");
var import_koishi = require("koishi");
var import_prompt = require("koishi-plugin-chatluna/llm-core/prompt");
var import_error = require("koishi-plugin-chatluna/utils/error");
var import_logger = require("koishi-plugin-chatluna/utils/logger");
var import_path = __toESM(require("path"), 1);
var import_url = require("url");
var import_md5 = __toESM(require("md5"), 1);
var import_meta = {};
var logger;
var PresetService = class {
  constructor(ctx, config, cache) {
    this.ctx = ctx;
    this.config = config;
    this.cache = cache;
    logger = (0, import_logger.createLogger)(ctx);
    ctx.on("dispose", () => {
      this._aborter?.abort();
    });
  }
  static {
    __name(this, "PresetService");
  }
  _presets = [];
  _aborter;
  async loadPreset(file) {
    const rawText = await import_promises.default.readFile(file, "utf-8");
    try {
      const preset = (0, import_prompt.loadPreset)(rawText);
      preset.path = file;
      this._presets.push(preset);
    } catch (e) {
      logger.error(`error when load preset ${file}`, e);
    }
  }
  async loadAllPreset() {
    await this._checkPresetDir();
    const presetDir = this.resolvePresetDir();
    const files = await import_promises.default.readdir(presetDir);
    this._presets.length = 0;
    for (const file of files) {
      const extension = import_path.default.extname(file);
      if (extension !== ".txt" && extension !== ".yml") {
        continue;
      }
      await this.loadPreset(import_path.default.join(presetDir, file));
    }
    this._updateSchema();
  }
  watchPreset() {
    let fsWait = false;
    const md5Cache = /* @__PURE__ */ new Map();
    if (this._aborter != null) {
      this._aborter.abort();
    }
    this._aborter = new AbortController();
    (0, import_fs.watch)(
      this.resolvePresetDir(),
      {
        signal: this._aborter.signal
      },
      async (event, filename) => {
        if (!filename) {
          await this.loadAllPreset();
          logger.debug(`trigger full reload preset`);
          return;
        }
        if (fsWait) return;
        fsWait = setTimeout(() => {
          fsWait = false;
        }, 100);
        const filePath = import_path.default.join(this.resolvePresetDir(), filename);
        try {
          const fileStat = await import_promises.default.stat(filePath);
          if (fileStat.isDirectory()) return;
          if (event === "rename" && !fileStat) {
            const index2 = this._presets.findIndex(
              (p) => p.path === filePath
            );
            if (index2 !== -1) {
              this._presets.splice(index2, 1);
              md5Cache.delete(filePath);
              logger.debug(`removed preset: ${filename}`);
              return;
            }
          }
          const md5Current = (0, import_md5.default)(await import_promises.default.readFile(filePath));
          if (md5Current === md5Cache.get(filePath)) return;
          md5Cache.set(filePath, md5Current);
          const index = this._presets.findIndex(
            (p) => p.path === filePath
          );
          if (index !== -1) {
            const preset = (0, import_prompt.loadPreset)(
              await import_promises.default.readFile(filePath, "utf-8")
            );
            preset.path = filePath;
            this._presets[index] = preset;
            logger.debug(`updated preset: ${filename}`);
          } else {
            await this.loadPreset(filePath);
            logger.debug(`added new preset: ${filename}`);
          }
          this._updateSchema();
        } catch (e) {
          logger.error(
            `error when watching preset file ${filePath}`,
            e
          );
          await this.loadAllPreset();
        }
      }
    );
  }
  async init() {
    await this.loadAllPreset();
    this.watchPreset();
  }
  async getPreset(triggerKeyword, loadForDisk = false, throwError = true) {
    if (loadForDisk) {
      await this.loadAllPreset();
    }
    const preset = this._presets.find(
      (preset2) => preset2.triggerKeyword.includes(triggerKeyword)
    );
    if (preset) {
      return preset;
    }
    if (throwError) {
      throw new import_error.ChatLunaError(
        import_error.ChatLunaErrorCode.PREST_NOT_FOUND,
        new Error(`No preset found for keyword ${triggerKeyword}`)
      );
    }
    return void 0;
  }
  async getDefaultPreset() {
    if (this._presets.length === 0) {
      await this.loadAllPreset();
    }
    const preset = this._presets.find(
      (preset2) => preset2.triggerKeyword.includes("chatgpt")
    );
    if (preset) {
      return preset;
    } else {
      await this._copyDefaultPresets();
      return this.getDefaultPreset();
    }
  }
  async getAllPreset(concatKeyword = true) {
    await this.loadAllPreset();
    return this._presets.map(
      (preset) => concatKeyword ? preset.triggerKeyword.join(", ") : preset.triggerKeyword[0]
    );
  }
  async addPreset(preset) {
    this._presets.push(preset);
    this._updateSchema();
  }
  _updateSchema() {
    if (!this.ctx.scope.isActive) {
      return;
    }
    this.ctx.schema.set(
      "preset",
      import_koishi.Schema.union(
        this._presets.map(
          (preset) => import_koishi.Schema.const(preset.triggerKeyword[0])
        )
      )
    );
  }
  async resetDefaultPreset() {
    await this.cache.delete("default-preset");
    await this._copyDefaultPresets();
  }
  resolvePresetDir() {
    return import_path.default.resolve(this.ctx.baseDir, "data/chathub/presets");
  }
  async _checkPresetDir() {
    const presetDir = import_path.default.join(this.resolvePresetDir());
    try {
      await import_promises.default.access(presetDir);
    } catch (err) {
      if (err.code === "ENOENT") {
        await import_promises.default.mkdir(presetDir, { recursive: true });
        await this._copyDefaultPresets();
      } else {
        throw err;
      }
    }
  }
  async _copyDefaultPresets() {
    const currentPresetDir = import_path.default.join(this.resolvePresetDir());
    const dirname = __dirname?.length > 0 ? __dirname : (0, import_url.fileURLToPath)(import_meta.url);
    const defaultPresetDir = import_path.default.join(dirname, "../resources/presets");
    const files = await import_promises.default.readdir(defaultPresetDir);
    for (const file of files) {
      const filePath = import_path.default.join(defaultPresetDir, file);
      const fileStat = await import_promises.default.stat(filePath);
      if (fileStat.isFile()) {
        await import_promises.default.mkdir(currentPresetDir, { recursive: true });
        logger.debug(
          `copy preset file ${filePath} to ${currentPresetDir}`
        );
        await import_promises.default.copyFile(filePath, import_path.default.join(currentPresetDir, file));
      }
    }
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  PresetService
});
