var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/llm-core/platform/client.ts
var client_exports = {};
__export(client_exports, {
  BasePlatformClient: () => BasePlatformClient,
  PlatformEmbeddingsClient: () => PlatformEmbeddingsClient,
  PlatformModelAndEmbeddingsClient: () => PlatformModelAndEmbeddingsClient,
  PlatformModelClient: () => PlatformModelClient
});
module.exports = __toCommonJS(client_exports);
var BasePlatformClient = class {
  constructor(ctx, config) {
    this.ctx = ctx;
    this.config = config;
  }
  static {
    __name(this, "BasePlatformClient");
  }
  _modelPool = {};
  async isAvailable() {
    for (let i = 0; i < (this.config.maxRetries ?? 1); i++) {
      try {
        await this.init();
        return true;
      } catch (e) {
        this.ctx.chatluna["logger"].error(e);
        if (i === this.config.maxRetries - 1) {
          return false;
        }
      }
    }
  }
  createModel(model) {
    if (!this._modelPool[model]) {
      this._modelPool[model] = this._createModel(model);
    }
    return this._modelPool[model];
  }
};
var PlatformModelClient = class extends BasePlatformClient {
  static {
    __name(this, "PlatformModelClient");
  }
  async clearContext() {
  }
};
var PlatformEmbeddingsClient = class extends BasePlatformClient {
  static {
    __name(this, "PlatformEmbeddingsClient");
  }
  async init() {
  }
};
var PlatformModelAndEmbeddingsClient = class extends BasePlatformClient {
  static {
    __name(this, "PlatformModelAndEmbeddingsClient");
  }
  async clearContext() {
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  BasePlatformClient,
  PlatformEmbeddingsClient,
  PlatformModelAndEmbeddingsClient,
  PlatformModelClient
});
