import { Awaitable, Computed, Context } from 'koishi';
import { PlatformClientNames } from 'koishi-plugin-chatluna/llm-core/platform/types';
export interface ClientConfig {
    apiKey: string;
    platform: PlatformClientNames;
    maxRetries: number;
    concurrentMaxSize: number;
    apiEndpoint?: string;
    timeout: number;
    chatLimit: Computed<Awaitable<number>>;
}
export interface ClientConfigWrapper<T extends ClientConfig = ClientConfig> {
    value: T;
    md5(): string;
    isAvailable: boolean;
    _md5?: string;
}
export declare class ClientConfigPool<T extends ClientConfig = ClientConfig> {
    private ctx;
    private _configs;
    private _mode;
    private _currentLoadConfigIndex;
    constructor(ctx: Context, mode?: ClientConfigPoolMode);
    addConfig(config: T): Promise<void>;
    private findAvailableConfig;
    getConfig(lockSelectConfig?: boolean): ClientConfigWrapper<T>;
    getConfigs(): readonly ClientConfigWrapper<T>[];
    markConfigStatus(config: T, isAvailable: boolean): Promise<void>;
    private _getConfigMD5;
    private _createWrapperConfig;
    private _checkConfigs;
}
declare module '@koishijs/cache' {
    interface Tables {
        'chathub/client_config': boolean;
    }
}
export declare enum ClientConfigPoolMode {
    LoadBalancing = 0,
    AlwaysTheSame = 1
}
