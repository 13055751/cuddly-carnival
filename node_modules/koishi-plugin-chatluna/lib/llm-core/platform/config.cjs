var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/llm-core/platform/config.ts
var config_exports = {};
__export(config_exports, {
  ClientConfigPool: () => ClientConfigPool,
  ClientConfigPoolMode: () => ClientConfigPoolMode
});
module.exports = __toCommonJS(config_exports);
var import_error = require("koishi-plugin-chatluna/utils/error");
var import_md5 = __toESM(require("md5"), 1);
var ClientConfigPool = class {
  constructor(ctx, mode = 1 /* AlwaysTheSame */) {
    this.ctx = ctx;
    this._mode = mode;
  }
  static {
    __name(this, "ClientConfigPool");
  }
  _configs = [];
  _mode = 1 /* AlwaysTheSame */;
  _currentLoadConfigIndex = 0;
  async addConfig(config) {
    const wrapperConfig = this._createWrapperConfig(config);
    this._configs.push(wrapperConfig);
    await this._checkConfigs();
    if (wrapperConfig.isAvailable === true) {
      await this.markConfigStatus(config, true);
    }
  }
  findAvailableConfig() {
    return this._configs.find((config) => config.isAvailable);
  }
  getConfig(lockSelectConfig = false) {
    if (this._mode !== 0 /* LoadBalancing */) {
      const config = this.findAvailableConfig();
      if (!config) {
        throw new import_error.ChatLunaError(import_error.ChatLunaErrorCode.NOT_AVAILABLE_CONFIG);
      }
      return config;
    }
    const startIndex = this._currentLoadConfigIndex;
    do {
      const config = this._configs[this._currentLoadConfigIndex];
      if (config?.isAvailable) {
        if (!lockSelectConfig) {
          this._currentLoadConfigIndex = (this._currentLoadConfigIndex + 1) % this._configs.length;
        }
        return config;
      }
      this._currentLoadConfigIndex = (this._currentLoadConfigIndex + 1) % this._configs.length;
    } while (this._currentLoadConfigIndex !== startIndex);
    throw new import_error.ChatLunaError(import_error.ChatLunaErrorCode.NOT_AVAILABLE_CONFIG);
  }
  getConfigs() {
    return this._configs;
  }
  async markConfigStatus(config, isAvailable) {
    const key = this._getConfigMD5(config);
    await this.ctx.chatluna.cache.set(
      "chathub/client_config",
      key,
      isAvailable
    );
    const wrapper = this._configs.find((c) => c.md5() === key);
    wrapper.isAvailable = isAvailable;
  }
  _getConfigMD5(config) {
    const values = Object.keys(config).sort().map((key) => config[key]);
    return (0, import_md5.default)(values.join(""));
  }
  _createWrapperConfig(config) {
    const wrapper = {
      value: config,
      md5: /* @__PURE__ */ __name(() => {
        if (wrapper._md5 == null) {
          wrapper._md5 = this._getConfigMD5(config);
        }
        return wrapper._md5;
      }, "md5"),
      isAvailable: true
    };
    return wrapper;
  }
  async _checkConfigs() {
    for (const config of this._configs) {
      const md52 = config.md5();
      const isAvailable = await this.ctx.chatluna.cache.get(
        "chathub/client_config",
        md52
      );
      config.isAvailable = isAvailable;
    }
  }
};
var ClientConfigPoolMode = /* @__PURE__ */ ((ClientConfigPoolMode2) => {
  ClientConfigPoolMode2[ClientConfigPoolMode2["LoadBalancing"] = 0] = "LoadBalancing";
  ClientConfigPoolMode2[ClientConfigPoolMode2["AlwaysTheSame"] = 1] = "AlwaysTheSame";
  return ClientConfigPoolMode2;
})(ClientConfigPoolMode || {});
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ClientConfigPool,
  ClientConfigPoolMode
});
