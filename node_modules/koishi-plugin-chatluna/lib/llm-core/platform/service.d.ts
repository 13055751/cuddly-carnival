import { Context, Dict } from 'koishi';
import { BasePlatformClient } from 'koishi-plugin-chatluna/llm-core/platform/client';
import { ClientConfig, ClientConfigPool } from 'koishi-plugin-chatluna/llm-core/platform/config';
import { ChatLunaChainInfo, ChatLunaTool, CreateChatLunaLLMChainParams, CreateVectorStoreFunction, CreateVectorStoreParams, ModelInfo, ModelType, PlatformClientNames } from 'koishi-plugin-chatluna/llm-core/platform/types';
import { ChatLunaLLMChainWrapper } from '../chain/base';
import { ChatLunaSaveableVectorStore } from 'koishi-plugin-chatluna/llm-core/model/base';
export declare class PlatformService {
    private ctx;
    private _platformClients;
    private _createClientFunctions;
    private _configPools;
    private _tools;
    private _models;
    private _chatChains;
    private _vectorStore;
    private _tmpVectorStores;
    constructor(ctx: Context);
    registerClient(name: PlatformClientNames, createClientFunction: (ctx: Context, config: ClientConfig) => BasePlatformClient): () => void;
    registerConfigPool(name: string, configPool: ClientConfigPool): void;
    registerTool(name: string, toolCreator: ChatLunaTool): () => void;
    unregisterTool(name: string): void;
    unregisterClient(platform: PlatformClientNames): void;
    unregisterVectorStore(name: string): void;
    registerVectorStore(name: string, vectorStoreRetrieverCreator: CreateVectorStoreFunction): () => void;
    registerChatChain(name: string, description: Dict<string>, createChatChainFunction: (params: CreateChatLunaLLMChainParams) => Promise<ChatLunaLLMChainWrapper>): () => void;
    unregisterChatChain(name: string): void;
    getModels(platform: PlatformClientNames, type: ModelType): ModelInfo[];
    getTools(): string[];
    getConfigs(platform: string): readonly import("koishi-plugin-chatluna/llm-core/platform/config").ClientConfigWrapper<ClientConfig>[];
    resolveModel(platform: PlatformClientNames, name: string): ModelInfo;
    getAllModels(type: ModelType): string[];
    getVectorStores(): string[];
    /**
     * @deprecated Use {@link getVectorStores} instead. Will be removed in the next version.
     */
    getVectorStoreRetrievers(): CreateVectorStoreFunction[];
    getChatChains(): ChatLunaChainInfo[];
    makeConfigStatus(config: ClientConfig, isAvailable: boolean): Promise<void>;
    createVectorStore(name: string, params: CreateVectorStoreParams): Promise<ChatLunaSaveableVectorStore<import("@langchain/core/vectorstores").VectorStore>>;
    randomConfig(platform: string, lockConfig?: boolean): Promise<import("koishi-plugin-chatluna/llm-core/platform/config").ClientConfigWrapper<ClientConfig>>;
    randomClient(platform: string, lockConfig?: boolean): Promise<BasePlatformClient<ClientConfig, import("./model").ChatLunaChatModel | import("./model").ChatHubBaseEmbeddings>>;
    getClientForCache(config: ClientConfig): BasePlatformClient<ClientConfig, import("./model").ChatLunaChatModel | import("./model").ChatHubBaseEmbeddings>;
    getClient(config: ClientConfig): Promise<BasePlatformClient<ClientConfig, import("./model").ChatLunaChatModel | import("./model").ChatHubBaseEmbeddings>>;
    refreshClient(client: BasePlatformClient, platform: string, config: ClientConfig): Promise<any>;
    createClient(platform: string, config: ClientConfig): Promise<BasePlatformClient<ClientConfig, import("./model").ChatLunaChatModel | import("./model").ChatHubBaseEmbeddings>>;
    createClients(platform: string): Promise<BasePlatformClient<ClientConfig, import("./model").ChatLunaChatModel | import("./model").ChatHubBaseEmbeddings>[]>;
    getTool(name: string): ChatLunaTool;
    createChatChain(name: string, params: CreateChatLunaLLMChainParams): Promise<ChatLunaLLMChainWrapper>;
    private _getClientConfigAsKey;
    dispose(): void;
}
declare module 'koishi' {
    interface Events {
        'chatluna/chat-chain-added': (service: PlatformService, chain: ChatLunaChainInfo) => void;
        'chatluna/model-added': (service: PlatformService, platform: PlatformClientNames, client: BasePlatformClient | BasePlatformClient[]) => void;
        'chatluna/embeddings-added': (service: PlatformService, platform: PlatformClientNames, client: BasePlatformClient | BasePlatformClient[]) => void;
        'chatluna/vector-store-added': (service: PlatformService, name: string) => void;
        'chatluna/chat-chain-removed': (service: PlatformService, chain: ChatLunaChainInfo) => void;
        'chatluna/model-removed': (service: PlatformService, platform: PlatformClientNames, client: BasePlatformClient) => void;
        'chatluna/vector-store-removed': (service: PlatformService, name: string) => void;
        'chatluna/embeddings-removed': (service: PlatformService, platform: PlatformClientNames, client: BasePlatformClient | BasePlatformClient[]) => void;
        'chatluna/tool-updated': (service: PlatformService) => void;
    }
}
