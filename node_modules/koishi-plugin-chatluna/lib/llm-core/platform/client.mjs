var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// src/llm-core/platform/client.ts
var BasePlatformClient = class {
  constructor(ctx, config) {
    this.ctx = ctx;
    this.config = config;
  }
  static {
    __name(this, "BasePlatformClient");
  }
  _modelPool = {};
  async isAvailable() {
    for (let i = 0; i < (this.config.maxRetries ?? 1); i++) {
      try {
        await this.init();
        return true;
      } catch (e) {
        this.ctx.chatluna["logger"].error(e);
        if (i === this.config.maxRetries - 1) {
          return false;
        }
      }
    }
  }
  createModel(model) {
    if (!this._modelPool[model]) {
      this._modelPool[model] = this._createModel(model);
    }
    return this._modelPool[model];
  }
};
var PlatformModelClient = class extends BasePlatformClient {
  static {
    __name(this, "PlatformModelClient");
  }
  async clearContext() {
  }
};
var PlatformEmbeddingsClient = class extends BasePlatformClient {
  static {
    __name(this, "PlatformEmbeddingsClient");
  }
  async init() {
  }
};
var PlatformModelAndEmbeddingsClient = class extends BasePlatformClient {
  static {
    __name(this, "PlatformModelAndEmbeddingsClient");
  }
  async clearContext() {
  }
};
export {
  BasePlatformClient,
  PlatformEmbeddingsClient,
  PlatformModelAndEmbeddingsClient,
  PlatformModelClient
};
