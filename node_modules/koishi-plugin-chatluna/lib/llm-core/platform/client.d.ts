import { Context } from 'koishi';
import { ClientConfig } from 'koishi-plugin-chatluna/llm-core/platform/config';
import { ChatHubBaseEmbeddings, ChatLunaChatModel } from 'koishi-plugin-chatluna/llm-core/platform/model';
import { ModelInfo, PlatformClientNames } from 'koishi-plugin-chatluna/llm-core/platform/types';
export declare abstract class BasePlatformClient<T extends ClientConfig = ClientConfig, R = ChatLunaChatModel | ChatHubBaseEmbeddings> {
    ctx: Context;
    config: T;
    private _modelPool;
    abstract platform: PlatformClientNames;
    constructor(ctx: Context, config: T);
    isAvailable(): Promise<boolean>;
    abstract init(): Promise<void>;
    abstract getModels(): Promise<ModelInfo[]>;
    abstract refreshModels(): Promise<ModelInfo[]>;
    protected abstract _createModel(model: string): R;
    createModel(model: string): R;
}
export declare abstract class PlatformModelClient<T extends ClientConfig = ClientConfig> extends BasePlatformClient<T, ChatLunaChatModel> {
    clearContext(): Promise<void>;
}
export declare abstract class PlatformEmbeddingsClient<T extends ClientConfig = ClientConfig> extends BasePlatformClient<T, ChatHubBaseEmbeddings> {
    init(): Promise<void>;
}
export declare abstract class PlatformModelAndEmbeddingsClient<T extends ClientConfig = ClientConfig> extends BasePlatformClient<T> {
    clearContext(): Promise<void>;
}
