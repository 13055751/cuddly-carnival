var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/llm-core/model/base.ts
var base_exports = {};
__export(base_exports, {
  ChatLunaSaveableVectorStore: () => ChatLunaSaveableVectorStore
});
module.exports = __toCommonJS(base_exports);
var import_vectorstores = require("@langchain/core/vectorstores");
var ChatLunaSaveableVectorStore = class extends import_vectorstores.VectorStore {
  constructor(_store, input) {
    super(_store.embeddings, {});
    this._store = _store;
    this.saveableFunction = input.saveableFunction ?? (async () => {
    });
    this.deletableFunction = input.deletableFunction;
    this.addDocumentsFunction = input.addDocumentsFunction;
    this.similaritySearchVectorWithScoreFunction = input.similaritySearchVectorWithScoreFunction;
    this.freeFunction = input.freeFunction;
  }
  static {
    __name(this, "ChatLunaSaveableVectorStore");
  }
  saveableFunction;
  deletableFunction;
  addDocumentsFunction;
  similaritySearchVectorWithScoreFunction;
  freeFunction;
  _isActive = true;
  addVectors(...args) {
    this.checkActive();
    if (args[0].length === 0 || args[0].some((v) => v.length === 0)) {
      throw new Error("Embedding dismension is 0");
    }
    return this._store.addVectors(...args);
  }
  addDocuments(...args) {
    this.checkActive();
    if (this.addDocumentsFunction) {
      return this.addDocumentsFunction(this._store, ...args);
    }
    for (const document of args[0]) {
      if (document.pageContent.length === 0) {
        throw new Error("Document content is empty");
      }
    }
    return this._store.addDocuments(args[0], args[1]);
  }
  similaritySearchVectorWithScore(...args) {
    this.checkActive();
    if (args[0].length === 0) {
      throw new Error("Embedding dismension is 0");
    }
    if (this.similaritySearchVectorWithScoreFunction) {
      return this.similaritySearchVectorWithScoreFunction(
        this._store,
        ...args
      );
    }
    return this._store.similaritySearchVectorWithScore(
      args[0],
      args[1],
      args[2]
    );
  }
  async editDocument(oldDocumentId, newDocument) {
    this.checkActive();
    await this.delete({ ids: [oldDocumentId] });
    await this.addDocuments([
      newDocument
    ]);
  }
  save() {
    this.checkActive();
    return this?.saveableFunction(this._store);
  }
  // eslint-disable-next-line @typescript-eslint/no-explicit-any
  delete(input) {
    this.checkActive();
    return this?.deletableFunction?.(this._store, input) ?? this._store.delete(input);
  }
  _vectorstoreType() {
    return this._store?._vectorstoreType() ?? "?";
  }
  checkActive(throwError = true) {
    if (!this._isActive && throwError) {
      throw new Error("VectorStore is not active");
    }
    return this._isActive;
  }
  async free() {
    if (this.freeFunction) {
      await this.freeFunction();
    }
    this._store = void 0;
    this._isActive = false;
  }
};
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  ChatLunaSaveableVectorStore
});
