import { VectorStore } from '@langchain/core/vectorstores';
import { Document } from '@langchain/core/documents';
export declare class ChatLunaSaveableVectorStore<T extends VectorStore = VectorStore> extends VectorStore implements ChatLunaSaveableVectorStoreInput<T> {
    private _store;
    saveableFunction: (store: T) => Promise<void>;
    deletableFunction?: (store: T, input: ChatLunaSaveableVectorDelete) => Promise<void>;
    addDocumentsFunction?: (store: T, ...args: Parameters<T['addDocuments']>) => Promise<void>;
    similaritySearchVectorWithScoreFunction?: (store: T, ...args: Parameters<T['similaritySearchVectorWithScore']>) => Promise<[Document, number][]>;
    freeFunction?: () => Promise<void>;
    private _isActive;
    constructor(_store: T, input: ChatLunaSaveableVectorStoreInput<T>);
    addVectors(...args: Parameters<typeof this._store.addVectors>): Promise<void | string[]>;
    addDocuments(...args: Parameters<T['addDocuments']>): Promise<void | string[]>;
    similaritySearchVectorWithScore(...args: Parameters<T['similaritySearchVectorWithScore']>): Promise<[import("@langchain/core/documents").DocumentInterface<Record<string, any>>, number][]>;
    editDocument(oldDocumentId: string, newDocument: Document): Promise<void>;
    save(): Promise<void>;
    delete(input: ChatLunaSaveableVectorDelete): Promise<void>;
    _vectorstoreType(): string;
    checkActive(throwError?: boolean): boolean;
    free(): Promise<void>;
}
export interface ChatLunaSaveableVectorStoreInput<T extends VectorStore> {
    saveableFunction?: (store: T) => Promise<void>;
    deletableFunction?: (store: T, input: ChatLunaSaveableVectorDelete) => Promise<void>;
    addDocumentsFunction?: (store: T, ...args: Parameters<T['addDocuments']>) => Promise<void>;
    similaritySearchVectorWithScoreFunction?: (store: T, ...args: Parameters<T['similaritySearchVectorWithScore']>) => Promise<[Document, number][]>;
    freeFunction?: () => Promise<void>;
}
export interface ChatLunaSaveableVectorDelete extends Record<string, any> {
    deleteAll?: boolean;
    documents?: Document[];
    ids?: string[];
}
