import { BaseMessage } from '@langchain/core/messages';
import { ChainValues } from '@langchain/core/utils/types';
import { ChatLunaLLMCallArg, ChatLunaLLMChainWrapper, SystemPrompts } from 'koishi-plugin-chatluna/llm-core/chain/base';
import { ChatHubBaseEmbeddings, ChatLunaChatModel } from 'koishi-plugin-chatluna/llm-core/platform/model';
import { ChatLunaTool } from 'koishi-plugin-chatluna/llm-core/platform/types';
import { AgentExecutor } from 'koishi-plugin-chatluna/llm-core/agent';
import { BufferMemory } from 'koishi-plugin-chatluna/llm-core/memory/langchain';
import { PresetTemplate } from 'koishi-plugin-chatluna/llm-core/prompt';
import { ChatLunaChatPrompt } from 'koishi-plugin-chatluna/llm-core/chain/prompt';
import type { PresetFormatService } from 'koishi-plugin-chatluna/services/chat';
export interface ChatLunaPluginChainInput {
    prompt: ChatLunaChatPrompt;
    historyMemory: BufferMemory;
    embeddings: ChatHubBaseEmbeddings;
    agentMode?: 'tool-calling' | 'react';
    variableService: PresetFormatService;
    preset: () => Promise<PresetTemplate>;
}
export declare class ChatLunaPluginChain extends ChatLunaLLMChainWrapper implements ChatLunaPluginChainInput {
    executor: AgentExecutor;
    historyMemory: BufferMemory;
    systemPrompts?: SystemPrompts;
    llm: ChatLunaChatModel;
    embeddings: ChatHubBaseEmbeddings;
    activeTools: ChatLunaTool[];
    tools: ChatLunaTool[];
    baseMessages: BaseMessage[];
    variableService: PresetFormatService;
    prompt: ChatLunaChatPrompt;
    preset: () => Promise<PresetTemplate>;
    agentMode?: 'tool-calling' | 'react';
    constructor({ historyMemory, prompt, llm, tools, preset, embeddings, agentMode }: ChatLunaPluginChainInput & {
        tools: ChatLunaTool[];
        llm: ChatLunaChatModel;
    });
    static fromLLMAndTools(llm: ChatLunaChatModel, tools: ChatLunaTool[], { historyMemory, preset, embeddings, agentMode, variableService }: Omit<ChatLunaPluginChainInput, 'prompt'>): Promise<ChatLunaPluginChain>;
    private _createExecutor;
    private _getActiveTools;
    call({ message, signal, session, events, conversationId, variables, maxToken }: ChatLunaLLMCallArg): Promise<ChainValues>;
    get model(): ChatLunaChatModel;
}
