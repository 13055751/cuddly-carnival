import { ChainValues } from '@langchain/core/utils/types';
import { ChatLunaLLMCallArg, ChatLunaLLMChain, ChatLunaLLMChainWrapper } from 'koishi-plugin-chatluna/llm-core/chain/base';
import { ChatLunaChatModel } from 'koishi-plugin-chatluna/llm-core/platform/model';
import { BufferMemory } from 'koishi-plugin-chatluna/llm-core/memory/langchain';
import { PresetTemplate } from 'koishi-plugin-chatluna/llm-core/prompt';
import type { PresetFormatService } from 'koishi-plugin-chatluna/services/chat';
export interface ChatHubChatChainInput {
    botName: string;
    preset: () => Promise<PresetTemplate>;
    humanMessagePrompt?: string;
    historyMemory: BufferMemory;
    variableService: PresetFormatService;
}
export declare class ChatHubChatChain extends ChatLunaLLMChainWrapper implements ChatHubChatChainInput {
    botName: string;
    chain: ChatLunaLLMChain;
    historyMemory: BufferMemory;
    preset: () => Promise<PresetTemplate>;
    variableService: PresetFormatService;
    constructor({ botName, historyMemory, preset, chain, variableService }: ChatHubChatChainInput & {
        chain: ChatLunaLLMChain;
    });
    static fromLLM(llm: ChatLunaChatModel, { botName, historyMemory, preset, variableService }: ChatHubChatChainInput): ChatLunaLLMChainWrapper;
    call({ message, stream, events, conversationId, variables, signal, maxToken }: ChatLunaLLMCallArg): Promise<ChainValues>;
    get model(): ChatLunaChatModel;
}
