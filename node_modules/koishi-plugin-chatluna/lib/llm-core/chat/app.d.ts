import { BaseChatMessageHistory } from '@langchain/core/chat_history';
import { Embeddings } from '@langchain/core/embeddings';
import { ChainValues } from '@langchain/core/utils/types';
import { Context } from 'koishi';
import { ConversationRoom } from '../../types';
import { ChatLunaLLMCallArg, ChatLunaLLMChainWrapper } from '../chain/base';
import { ClientConfigWrapper } from 'koishi-plugin-chatluna/llm-core/platform/config';
import { AIMessage, HumanMessage } from '@langchain/core/messages';
import { PresetTemplate } from 'koishi-plugin-chatluna/llm-core/prompt';
export declare class ChatInterface {
    ctx: Context;
    private _input;
    private _chatHistory;
    private _chains;
    private _embeddings;
    private _errorCountsMap;
    private _chatCount;
    constructor(ctx: Context, input: ChatInterfaceInput);
    private handleChatError;
    private disableConfig;
    chat(arg: ChatLunaLLMCallArg): Promise<ChainValues>;
    private processChat;
    private handlePostProcessing;
    createChatLunaLLMChainWrapper(): Promise<[
        ChatLunaLLMChainWrapper,
        ClientConfigWrapper
    ]>;
    get chatHistory(): BaseChatMessageHistory;
    get chatMode(): string;
    get embeddings(): Embeddings;
    get preset(): Promise<PresetTemplate>;
    delete(ctx: Context, room: ConversationRoom): Promise<void>;
    clearChatHistory(): Promise<void>;
    private _initEmbeddings;
    private _initModel;
    private _supportChatMode;
    private _createChatHistory;
    private _createHistoryMemory;
}
export interface ChatInterfaceInput {
    chatMode: string;
    botName?: string;
    preset?: () => Promise<PresetTemplate>;
    model: string;
    embeddings?: string;
    vectorStoreName?: string;
    conversationId: string;
    maxMessagesCount: number;
}
declare module 'koishi' {
    interface Events {
        'chatluna/before-chat': (conversationId: string, message: HumanMessage, promptVariables: ChainValues, chatInterface: ChatInterface, chain: ChatLunaLLMChainWrapper) => Promise<void>;
        'chatluna/after-chat': (conversationId: string, sourceMessage: HumanMessage, responseMessage: AIMessage, promptVariables: ChainValues, chatInterface: ChatInterface, chain: ChatLunaLLMChainWrapper) => Promise<void>;
        'chatluna/clear-chat-history': (conversationId: string, chatInterface: ChatInterface) => Promise<void>;
    }
}
