var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/utils/logger.ts
var logger_exports = {};
__export(logger_exports, {
  clearLogger: () => clearLogger,
  createLogger: () => createLogger,
  setLoggerLevel: () => setLoggerLevel
});
module.exports = __toCommonJS(logger_exports);
var loggers = {};
var logLevel = -1;
function createLogger(ctx, name = "chatluna") {
  const result = loggers[name] || ctx.logger(name);
  if (logLevel >= 0) {
    result.level = logLevel;
  }
  loggers[name] = result;
  return result;
}
__name(createLogger, "createLogger");
function setLoggerLevel(level) {
  logLevel = level;
  for (const name in loggers) {
    loggers[name].level = level;
  }
}
__name(setLoggerLevel, "setLoggerLevel");
function clearLogger() {
  loggers = {};
}
__name(clearLogger, "clearLogger");
// Annotate the CommonJS export names for ESM import in node:
0 && (module.exports = {
  clearLogger,
  createLogger,
  setLoggerLevel
});
