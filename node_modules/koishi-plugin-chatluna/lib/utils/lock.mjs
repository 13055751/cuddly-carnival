var __defProp = Object.defineProperty;
var __name = (target, value) => __defProp(target, "name", { value, configurable: true });

// src/utils/lock.ts
import { Time } from "koishi";
var ObjectLock = class {
  static {
    __name(this, "ObjectLock");
  }
  _lock = false;
  _queue = [];
  _timeout;
  constructor(timeout = Time.minute * 3) {
    this._timeout = timeout;
  }
  async lock() {
    const unlock = /* @__PURE__ */ __name(() => {
      const next = this._queue.shift();
      if (next) {
        next.resolve(unlock);
      } else {
        this._lock = false;
      }
    }, "unlock");
    if (this._lock) {
      let error = null;
      try {
        throw new Error(`Lock timeout after ${this._timeout}ms`);
      } catch (e) {
        error = e;
      }
      return new Promise((resolve, reject) => {
        const timeoutId = setTimeout(() => {
          const index = this._queue.findIndex(
            (q) => q.resolve === resolve
          );
          if (index !== -1) {
            this._queue.splice(index, 1);
          }
          reject(
            error ?? new Error(`Lock timeout after ${this._timeout}ms`)
          );
        }, this._timeout);
        this._queue.push({
          resolve: /* @__PURE__ */ __name((unlockFn) => {
            clearTimeout(timeoutId);
            resolve(unlockFn);
          }, "resolve"),
          reject
        });
      });
    }
    this._lock = true;
    return unlock;
  }
  async runLocked(func) {
    const unlock = await this.lock();
    try {
      return await func();
    } finally {
      unlock();
    }
  }
  get isLocked() {
    return this._lock;
  }
};
export {
  ObjectLock
};
