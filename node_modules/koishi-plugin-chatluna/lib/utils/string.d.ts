import { BaseMessage } from '@langchain/core/messages';
import type { HandlerResult, PostHandler } from './types';
import { Context, Session } from 'koishi';
import { Config } from 'koishi-plugin-chatluna';
type Encoding = 'buffer' | 'base64' | 'hex';
type BufferType<T extends Encoding> = T extends 'buffer' ? Buffer : T extends 'base64' ? string : T extends 'hex' ? string : never;
export declare function fuzzyQuery(source: string, keywords: string[]): boolean;
export declare function getMessageContent(message: BaseMessage['content']): string;
export declare function getNotEmptyString(...texts: (string | undefined)[]): string;
export declare function getCurrentWeekday(): string;
export declare const getTimeInUTC: (offset: number) => string;
export declare const getTimeDiffFormat: (time1: number, time2: number) => string;
export declare const getTimeDiff: (time1: string, time2: string) => string;
export declare const selectFromList: (args: string, isPick: boolean) => string;
export declare const rollDice: (formula: string) => number;
export declare const fetchUrl: (url: string, method?: string, body?: string | null, textLength?: number) => Promise<string>;
export declare class PresetPostHandler implements PostHandler {
    private ctx;
    private config;
    prefix: string;
    postfix: string;
    variables: Record<string, string>;
    censor?: boolean;
    compiledVariables: Record<string, RegExp>;
    constructor(ctx: Context, config: Config, object: Omit<PostHandler, 'handler'>);
    handler(session: Session, data: string): Promise<HandlerResult>;
    private _compileVariables;
}
export declare function gzipEncode<T extends Encoding = 'buffer'>(text: string, encoding?: T): Promise<BufferType<T>>;
export declare function gzipDecode(data: ArrayBuffer | Buffer | string, inputEncoding?: Encoding): Promise<string>;
export declare function bufferToArrayBuffer(buffer: Buffer): ArrayBuffer;
export declare function hashString(text: string, length?: number): Promise<string>;
export {};
