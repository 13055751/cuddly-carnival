import { Context, Logger, Schema } from 'koishi';
import { ChatLunaPlugin } from 'koishi-plugin-chatluna/services/chat';
import { ChatLunaChatModel } from 'koishi-plugin-chatluna/llm-core/platform/model';
import { SummaryType } from './types';
export declare let logger: Logger;
export declare function apply(ctx: Context, config: Config): void;
export declare function createModel(ctx: Context, model: string): Promise<ChatLunaChatModel>;
export interface Config extends ChatLunaPlugin.Config {
    searchEngine: string[];
    topK: number;
    summaryType: SummaryType;
    summaryModel: string;
    mulitSourceMode: 'average' | 'total';
    searchFailedPrompt: string;
    serperApiKey: string;
    serperCountry: string;
    serperLocation: string;
    serperSearchResults: number;
    bingSearchApiKey: string;
    bingSearchLocation: string;
    azureLocation: string;
    wikipediaBaseURL: string[];
    maxWikipediaDocContentLength: number;
    tavilyApiKey: string;
    searxngBaseURL: string;
    puppeteerTimeout: number;
    puppeteerIdleTimeout: number;
    searchPrompt: string;
    newQuestionPrompt: string;
    searchThreshold: number;
    contextualCompression: boolean;
    contextualCompressionPrompt: string;
    freeSearchBaseURL: string;
}
export declare const Config: Schema<Config>;
export declare const inject: string[];
export declare const name = "chatluna-search-service";
