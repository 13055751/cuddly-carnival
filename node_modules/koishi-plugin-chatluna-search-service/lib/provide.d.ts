import { Context, Schema } from 'koishi';
import { ChatLunaPlugin } from 'koishi-plugin-chatluna/services/chat';
import { SearchResult } from './types';
import { Config } from '.';
export declare abstract class SearchProvider {
    protected ctx: Context;
    protected config: Config;
    protected _plugin: ChatLunaPlugin;
    constructor(ctx: Context, config: Config, _plugin: ChatLunaPlugin);
    abstract search(query: string, limit: number): Promise<SearchResult[]>;
    abstract name: string;
}
export declare class SearchManager {
    private ctx;
    config: Config;
    private providers;
    private schemas;
    private _embeddings;
    constructor(ctx: Context, config: Config);
    addProvider(provider: SearchProvider): () => void;
    getProvider(name: string): SearchProvider | undefined;
    private _deleteProvider;
    updateSchema(schema: Schema): void;
    search(query: string, limit?: number, providerNames?: string[]): Promise<SearchResult[]>;
    private _getEmbeddings;
    private _reRankResults;
}
