"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.apply = exports.Config = exports.filter = exports.name = exports.md = exports.transform = void 0;
const koishi_1 = require("koishi");
const marked_1 = require("marked");
const tagRegExp = /^<(\/?)([^!\s>/]+)([^>]*?)\s*(\/?)>$/;
function renderToken(token) {
    if (token.type === 'code') {
        return (0, koishi_1.h)('text', { content: token.text + '\n' });
    }
    else if (token.type === 'paragraph') {
        return (0, koishi_1.h)('p', render(token.tokens));
    }
    else if (token.type === 'image') {
        return koishi_1.h.image(token.href);
    }
    else if (token.type === 'blockquote') {
        return (0, koishi_1.h)('text', { content: token.text + '\n' });
    }
    else if (token.type === 'text') {
        return (0, koishi_1.h)('text', { content: token.text });
    }
    else if (token.type === 'em') {
        return (0, koishi_1.h)('em', render(token.tokens));
    }
    else if (token.type === 'strong') {
        return (0, koishi_1.h)('strong', render(token.tokens));
    }
    else if (token.type === 'del') {
        return (0, koishi_1.h)('del', render(token.tokens));
    }
    else if (token.type === 'link') {
        return (0, koishi_1.h)('a', { href: token.href }, render(token.tokens));
    }
    else if (token.type === 'html') {
        const cap = tagRegExp.exec(token.text);
        if (!cap) {
            return (0, koishi_1.h)('text', { content: token.text });
        }
        if (cap[2] === 'img') {
            if (cap[1])
                return;
            const src = cap[3].match(/src="([^"]+)"/);
            if (src)
                return koishi_1.h.image(src[1]);
        }
    }
    return (0, koishi_1.h)('text', { content: token.raw });
}
function render(tokens) {
    return tokens.map(renderToken).filter(Boolean);
}
function transform(source, ...args) {
    if (!source)
        return [];
    if (Array.isArray(source)) {
        source = args.map((arg, index) => source[index] + arg).join('') + source[args.length];
    }
    return render(marked_1.marked.lexer(source));
}
exports.transform = transform;
exports.md = transform;
exports.name = 'markdown';
exports.filter = false;
exports.Config = koishi_1.Schema.object({});
function apply(ctx, config) {
    ctx.component('markdown', (attrs, children, session) => {
        return transform(children.join(''));
    }, { passive: true });
}
exports.apply = apply;
